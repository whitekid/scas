@startuml ACME
skinparam handwritten false
actor User as User
participant Client
boundary Server as Server
queue "Challenge Queue" as ChallengeQueue
actor "Challenge Server" as ChallengeServer
boundary CA as CA

== project setup ==
Client -> Server: create project
return acme endpoint

== initialization ==
Client -> Server: get directory
Client -> Server: new nonce
User -> Client: generate or load key-pair
Client -> Server: new account with public key

== JOSE Request ==
Client -> Client: create payload
activate Client
Client -> Client: JOSE signature
Client -> Client: Sign with private key
Client -> Server: request as POST-as-GET
activate Server
Server -> Server: nonce verification
Server -> Server: signature verification
Server -> Server: user state verification
Server -> Server: do something
return response with next nonce
deactivate Client

== Order ==
Client -> Server: new order
activate Server
Server -> Server: create authorizations
Server -> Server: create challenges
Server -> ChallengeQueue: enqueue
return response with status=pending
loop challenge queue
    activate ChallengeQueue
    ChallengeQueue -> ChallengeQueue: update challenge status = processing
    ChallengeQueue -> ChallengeServer: challenge verification(http01, dns01)
    alt chllenge verifify success
        ChallengeQueue -> ChallengeQueue: update challenge status = valid
        ChallengeQueue -> ChallengeQueue: update authorization status = valid
        ChallengeQueue -> ChallengeQueue: update order status = ready
    else verify failed
        ChallengeQueue -> ChallengeQueue: update challenge status = invalid
        ChallengeQueue -> ChallengeQueue: update authorization status = invalid
        ChallengeQueue -> ChallengeQueue: retry challenge
    end
    deactivate ChallengeQueue
end
User -> ChallengeServer: set verification information(manual setup)
loop until order status = ready
    Client -> Server: polling order status
    return status
end

Client -> Server: finalize order
activate Server
    alt remote CA Server
        Server -> CA: Issue certificate
    else local CA
        Server -> Server: Issue local 
    end
return 

Client -> Server: download certificate
activate Server
return certificate chain as PEM

== User ==
Client -> Server: update user information
Client -> Server: key change
Client -> Server: deactivate

== Cert ==
Client -> Server: revoke certificate
activate Server
Server -> CA: revoke
return

@enduml
